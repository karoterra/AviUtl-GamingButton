@CubicEquation
--track0:a3,-5,5,1,0.01
--track1:a2,-5,5,-1,0.01
--track2:a1,-5,5,-1,0.01
--track3:a0,-5,5,0,0.01

local a3, a2, a1, a0 = obj.track0, obj.track1, obj.track2, obj.track3
local CBE = require("CubicBezierEasing")
local scale = 500

obj.load("figure", "â~", 0xffffff, 10)
for x = -5, 5, 0.01 do
    local y = a3 * x^3 + a2 * x^2 + a1 * x + a0
    obj.ox = x * scale
    obj.oy = -y * scale
    obj.draw()
end

obj.load("figure", "â~", 0xff0000, 10)
local x_sol = CBE.solveCubic(a3, a2, a1, a0)
for i, val in pairs(x_sol) do
    obj.ox = val * scale
    obj.oy = 0
    obj.draw()
end


@CubicBezier
--track0:x1,0,1,0.25,0.01
--track1:y1,-5,5,0.1,0.01
--track2:x2,0,1,0.25,0.01
--track3:y2,-5,5,1.0,0.01

local x1, y1, x2, y2 = obj.track0, obj.track1, obj.track2, obj.track3
local CBE = require("CubicBezierEasing")
local size = 500
local n_plots = 256

obj.load("figure", "éläpå`", 0x002090, 1)
obj.drawpoly(-size/2,-size/2,0, size/2,-size/2,0, size/2,size/2,0, -size/2,size/2,0)

obj.load("figure", "â~", 0xffffff, 10)
for x = 0, 1, 1 / n_plots do
    local y = CBE.cubicBezierEasing(x, x1, y1, x2, y2)
    obj.ox = size * (x - 0.5)
    obj.oy = size * (-y + 0.5)
    obj.draw()
end

obj.load("figure", "â~", 0xff0000, 10)
obj.ox, obj.oy = size * (x1 - 0.5), size * (-y1 + 0.5)
obj.draw()
obj.ox, obj.oy = size * (x2 - 0.5), size * (-y2 + 0.5)
obj.draw()


@MultiCubicBeizer
--track0:ÉTÉCÉY,0,5000,500
--track1:ÉvÉçÉbÉg,1,5000,100,1
--dialog:êßå‰ì_,points={0.15,0,0.15,0.25,0.33,0.25,0.5,0.25,0.5,0.75,0.66,0.75,0.85,0.75,0.85,1}

local CBE = require("CubicBezierEasing")
local size = obj.track0
local n_plots = obj.track1

obj.load("figure", "éläpå`", 0x002090, 1)
obj.drawpoly(-size/2,-size/2,0, size/2,-size/2,0, size/2,size/2,0, -size/2,size/2,0)

obj.load("figure", "â~", 0xffffff, 10)
for x = 0, 1, 1 / n_plots do
    local y = CBE.multiCubicBezierEasing(x, points)
    obj.ox = (x - 0.5) * size
    obj.oy = (-y + 0.5) * size
    obj.draw()
end

obj.load("figure", "â~", 0xff0000, 10)
obj.ox, obj.oy = -size / 2, size / 2
obj.draw()
obj.ox, obj.oy = size / 2, -size / 2
obj.draw()
for i = 1, math.floor(#points / 2) do
    obj.ox = (points[2 * i - 1] - 0.5) * size
    obj.oy = (-points[2 * i] + 0.5) * size
    obj.draw()
end
